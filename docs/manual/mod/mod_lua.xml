<?xml version="1.0"?>
<!DOCTYPE modulesynopsis SYSTEM "../style/modulesynopsis.dtd">
<?xml-stylesheet type="text/xsl" href="../style/manual.en.xsl"?>
<!-- $LastChangedRevision$ -->

<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<modulesynopsis metafile="mod_lua.xml.meta">

<name>mod_lua</name>

<description>Provides Lua hooks into various portions of the httpd
request processing</description>
<status>Experimental</status>
<sourcefile>mod_lua.c</sourcefile>
<identifier>lua_module</identifier>
<compatibility>2.3 and later</compatibility>

<summary>
<p>This module allows the server to be extended with scripts written in the
Lua programming language.  The extension points (hooks) available with
<module>mod_lua</module> include many of the hooks available to
natively compiled Apache HTTP Server modules, such as mapping requests to
files, generating dynamic responses, access control, authentication, and
authorization</p>

<p>More information on the Lua programming language can be found at the
<a href="http://www.lua.org/">the Lua website</a>.</p>

<note><code>mod_lua</code> is still in experimental state.
Until it is declared stable, usage and behavior may change
at any time, even between stable releases of the 2.4.x series.
Be sure to check the CHANGES file before upgrading.</note>

</summary>

<section id="basicconf"><title>Basic Configuration</title>

<p>The basic module loading directive is</p>

<example>
    LoadModule lua_module modules/mod_lua.so
</example>

<p>
<code>mod_lua</code> provides a handler named <code>lua-script</code>,
which can be used with an <code>AddHandler</code> directive:</p>

<example>
AddHandler lua-script .lua
</example>

<p>
This will cause <code>mod_lua</code> to handle requests for files
ending in <code>.lua</code> by invoking that file's
<code>handle</code> function.
</p>

<p>For more flexibility, see <directive>LuaMapHandler</directive>.
</p>

</section>

<section id="writinghandlers"><title>Writing Handlers</title>
<p> In the Apache HTTP Server API, the handler is a specific kind of hook
responsible for generating the response.  Examples of modules that include a
handler are <module>mod_proxy</module>, <module>mod_cgi</module>,
and <module>mod_status</module>.</p>

<p><code>mod_lua</code> always looks to invoke a Lua function for the handler, rather than
just evaluating a script body CGI style. A handler function looks
something like this:</p>

<example><title>example.lua</title><pre>
-- example handler

require "string"

--[[
     This is the default method name for Lua handlers, see the optional
     function-name in the LuaMapHandler directive to choose a different
     entry point.
--]]
function handle(r)
    r.content_type = "text/plain"
    r:puts("Hello Lua World!\n")

    if r.method == 'GET' then
        for k, v in pairs( r:parseargs() ) do
            r:puts( string.format("%s: %s", k, v) )
        end
    elseif r.method == 'POST' then
        for k, v in pairs( r:parsebody() ) do
            r:puts( string.format("%s: %s", k, v) )
        end
    else
        r:puts("unknown HTTP method " .. r.method)
    end
end
</pre></example>

<p>
This handler function just prints out the uri or form encoded
arguments to a plaintext page.
</p>

<p>
This means (and in fact encourages) that you can have multiple
handlers (or hooks, or filters) in the same script.
</p>

</section>

<section id="writinghooks"><title>Writing Hooks</title>

<p>Hook functions are how modules (and Lua scripts) participate in the
processing of requests. Each type of hook exposed by the server exists for
a specific purposes such as mapping requests to the filesystem,
performing access control, or setting mimetypes.  General purpose hooks
that simply run at handy times in the request lifecycle exist as well.</p>

<p>Hook functions are passed the request object as their only argument.
They can return any value, depending on the hook, but most commonly
they'll return OK, DONE, or DECLINED, which you can write in lua as
<code>apache2.OK</code>, <code>apache2.DONE</code>, or
<code>apache2.DECLINED</code>, or else an HTTP status code.</p>

<example><title>translate_name.lua</title><pre>
-- example hook that rewrites the URI to a filesystem path.

require 'apache2'

function translate_name(r)
    if r.uri == "/translate-name" then
        r.filename = r.document_root .. "/find_me.txt"
        return apache2.OK
    end
    -- we don't care about this URL, give another module a chance
    return apache2.DECLINED
end
</pre></example>

<example><title>translate_name2.lua</title><pre>
--[[ example hook that rewrites one URI to another URI. It returns a
     apache2.DECLINED to give other URL mappers a chance to work on the
     substitution, including the core translate_name hook which maps based
     on the DocumentRoot.

     Note: It is currently undefined as to whether this runs before or after
     mod_alias.
--]]

require 'apache2'

function translate_name(r)
    if r.uri == "/translate-name" then
        r.uri = "/find_me.txt"
        return apache2.DECLINED
    end
    return apache2.DECLINED
end
</pre></example>
</section>

<section id="datastructures"><title>Data Structures</title>

<dl>
<dt>request_rec</dt>
        <dd>
        <p>The request_rec is mapped in as a userdata. It has a metatable
        which lets you do useful things with it. For the most part it
        has the same fields as the request_rec struct (see httpd.h
        until we get better docs here) many of which are writeable as
        well as readable.  (The table fields' content can be changed, but the
        fields themselves cannot be set to different tables.)</p>

        <table border="1">

        <tr>
          <th><strong>Name</strong></th>
          <th><strong>Lua type</strong></th>
          <th><strong>Writable</strong></th>
        </tr>
        <tr>
          <td><code>ap_auth_type</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>args</code></td>
          <td>string</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>assbackwards</code></td>
          <td>boolean</td>
          <td>no</td>
        </tr>

        <tr>
          <td><code>canonical_filename</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>content_encoding</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>content_type</code></td>
          <td>string</td>
          <td>yes</td>
        </tr>

        <tr>
          <td><code>document_root</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>err_headers_out</code></td>
          <td>table</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>filename</code></td>
          <td>string</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>handler</code></td>
          <td>string</td>
          <td>yes</td>
        </tr>

        <tr>
          <td><code>headers_in</code></td>
          <td>table</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>headers_out</code></td>
          <td>table</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>hostname</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>method</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>notes</code></td>
          <td>table</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>path_info</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>protocol</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>proxyreq</code></td>
          <td>string</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>range</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>subprocess_env</code></td>
          <td>table</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>status</code></td>
          <td>number</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>the_request</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>unparsed_uri</code></td>
          <td>string</td>
          <td>no</td>
        </tr>
        <tr>
          <td><code>uri</code></td>
          <td>string</td>
          <td>yes</td>
        </tr>
        <tr>
          <td><code>user</code></td>
          <td>string</td>
          <td>yes</td>
        </tr>
        </table>

        <p>The request_rec has (at least) the following methods:</p>

        <example>
        r:addoutputfilter(name|function) -- add an output filter
        </example>

        <example>
        r:parseargs() -- returns a lua table containing the request's
                         query string arguments
        </example>

        <example>
        r:parsebody() -- parse the request body as a POST and return
                         a lua table
        </example>

        <example>
        r:puts("hello", " world", "!") -- print to response body
        </example>

        <example>
        r:write("a single string") -- print to response body
        </example>
        </dd>
    </dl>

</section>

<section id="logging"><title>Logging Functions</title>

<example>
        -- examples of logging messages<br />
        r:trace1("This is a trace log message") -- trace1 through trace8 can be used <br />
        r:debug("This is a debug log message")<br />
        r:info("This is an info log message")<br />
        r:notice("This is an notice log message")<br />
        r:warn("This is an warn log message")<br />
        r:err("This is an err log message")<br />
        r:alert("This is an alert log message")<br />
        r:crit("This is an crit log message")<br />
        r:emerg("This is an emerg log message")<br />
</example>

</section>

<section id="apache2"><title>apache2 Package</title>
<p>A package named <code>apache2</code> is available with (at least) the following contents.</p>
<dl>
  <dt>apache2.OK</dt>
  <dd>internal constant OK.  Handlers should return this if they've
  handled the request.</dd>
  <dt>apache2.DECLINED</dt>
  <dd>internal constant DECLINED.  Handlers should return this if
  they are not going to handle the request.</dd>
  <dt>apache2.DONE</dt>
  <dd>internal constant DONE.</dd>
  <dt>apache2.version</dt>
  <dd>Apache HTTP server version string</dd>
  <dt>apache2.HTTP_MOVED_TEMPORARILY</dt>
  <dd>HTTP status code</dd>
  <dt>apache2.PROXYREQ_NONE, apache2.PROXYREQ_PROXY, apache2.PROXYREQ_REVERSE, apache2.PROXYREQ_RESPONSE</dt>
  <dd>internal constants used by <module>mod_proxy</module></dd>
</dl>
<p>(Other HTTP status codes are not yet implemented.)</p>
</section>

<directivesynopsis>
<name>LuaRoot</name>
<description>Specify the base path for resolving relative paths for mod_lua directives</description>
<syntax>LuaRoot /path/to/a/directory</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>

<usage>
    <p>Specify the base path which will be used to evaluate all
    relative paths within mod_lua. If not specified they
    will be resolved relative to the current working directory,
    which may not always work well for a server.</p>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaScope</name>
<description>One of once, request, conn, server -- default is once</description>
<syntax>LuaScope once|request|conn|server [max|min max]</syntax>
<default>LuaScope once</default>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>

<usage>
    <p>Specify the lifecycle scope of the Lua interpreter which will
    be used by handlers in this "Directory." The default is "once"</p>

   <dl>
    <dt>once:</dt> <dd>use the interpreter once and throw it away.</dd>

    <dt>request:</dt> <dd>use the interpreter to handle anything based on
             the same file within this request, which is also
             request scoped.</dd>

    <dt>conn:</dt> <dd>Same as request but attached to the connection_rec</dd>

    <dt>server:</dt>  <dd>This one is different than others because the
            server scope is quite long lived, and multiple threads
            will have the same server_rec. To accommodate this
            server scoped interpreter are stored in an apr
            resource list. The min and max arguments are intended
            to specify the pool size, but are unused at this time.</dd>
   </dl>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaMapHandler</name>
<description>Map a path to a lua handler</description>
<syntax>LuaMapHandler uri-pattern /path/to/lua/script.lua [function-name]</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
<usage>
    <p>This directive matches a uri pattern to invoke a specific
    handler function in a specific file. It uses PCRE regular
    expressions to match the uri, and supports interpolating
    match groups into both the file path and the function name
    be careful writing your regular expressions to avoid security
    issues.</p>
   <example><title>Examples:</title>
    LuaMapHandler /(\w+)/(/w+) /scripts/$1.lua handle_$2
   </example>
        <p>This would match uri's such as /photos/show?id=9
        to the file /scripts/photos.lua and invoke the
        handler function handle_show on the lua vm after
        loading that file.</p>

<example>
    LuaMapHandler /bingo /scripts/wombat.lua
</example>
        <p>This would invoke the "handle" function, which
        is the default if no specific function name is
        provided.</p>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaPackagePath</name>
<description>Add a directory to lua's package.path</description>
<syntax>LuaPackagePath /path/to/include/?.lua</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
    <usage><p>Add a path to lua's module search path. Follows the same
    conventions as lua. This just munges the package.path in the
    lua vms.</p>

    <example><title>Examples:</title>
        LuaPackagePath /scripts/lib/?.lua<br />
        LuaPackagePath /scripts/lib/?/init.lua
    </example>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaPackageCPath</name>
<description>Add a directory to lua's package.cpath</description>
<syntax>LuaPackageCPath /path/to/include/?.soa</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>

<usage>
    <p>Add a path to lua's shared library search path. Follows the same
    conventions as lua. This just munges the package.cpath in the
    lua vms.</p>

</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaCodeCache</name>
<description>Configure the compiled code cache.</description>
<syntax>LuaCodeCache stat|forever|never</syntax>
<default>LuaCodeCache stat</default>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>

<usage><p>
    Specify the behavior of the in-memory code cache. The default
    is stat, which stats the top level script (not any included
    ones) each time that file is needed, and reloads it if the
    modified time indicates it is newer than the one it has
    already loaded. The other values cause it to keep the file
    cached forever (don't stat and replace) or to never cache the
    file.</p>

    <p>In general stat or forever is good for production, and stat or never
    for development.</p>

    <example><title>Examples:</title>
        LuaCodeCache stat<br />
        LuaCodeCache forever<br />
        LuaCodeCache never<br />
    </example>

</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookTranslateName</name>
<description>Provide a hook for the translate name phase of request processing</description>
<syntax>LuaHookTranslateName  /path/to/lua/script.lua  hook_function_name [early|late]</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context>
</contextlist>
<override>All</override>
<compatibility>The optional third argument is supported in 2.3.15 and later</compatibility>

<usage><p>
    Add a hook (at APR_HOOK_MIDDLE) to the translate name phase of
    request processing. The hook function receives a single
    argument, the request_rec, and should return a status code,
    which is either an HTTP error code, or the constants defined
    in the apache2 module: apache2.OK, apache2.DECLINED, or
    apache2.DONE. </p>

    <p>For those new to hooks, basically each hook will be invoked
    until one of them returns apache2.OK. If your hook doesn't
    want to do the translation it should just return
    apache2.DECLINED. If the request should stop processing, then
    return apache2.DONE.</p>

    <p>Example:</p>

<example><pre>
# httpd.conf
LuaHookTranslateName /scripts/conf/hooks.lua silly_mapper

-- /scripts/conf/hooks.lua --
require "apache2"
function silly_mapper(r)
    if r.uri == "/" then
        r.filename = "/var/www/home.lua"
        return apache2.OK
    else
        return apache2.DECLINED
    end
end
</pre></example>

   <note><title>Context</title><p>This directive is not valid in <directive
   type="section" module="core">Directory</directive>, <directive
   type="section" module="core">Files</directive>, or htaccess
   context.</p></note>

   <note><title>Ordering</title><p>The optional arguments "early" or "late" 
   control when this script runs relative to other modules.</p></note>

</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookFixups</name>
<description>Provide a hook for the fixups phase of request
processing</description>
<syntax>LuaHookFixups  /path/to/lua/script.lua hook_function_name</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
<usage>
<p>
    Just like LuaHookTranslateName, but executed at the fixups phase
</p>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookMapToStorage</name>
<description>Provide a hook for the map_to_storage phase of request processing</description>
<syntax>LuaHookMapToStorage  /path/to/lua/script.lua hook_function_name</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
    <usage><p>...</p></usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookCheckUserID</name>
<description>Provide a hook for the check_user_id phase of request processing</description>
<syntax>LuaHookCheckUserID  /path/to/lua/script.lua hook_function_name [early|late]</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
<compatibility>The optional third argument is supported in 2.3.15 and later</compatibility>
<usage><p>...</p>
   <note><title>Ordering</title><p>The optional arguments "early" or "late" 
   control when this script runs relative to other modules.</p></note>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookTypeChecker</name>
<description>Provide a hook for the type_checker phase of request processing</description>
<syntax>LuaHookTypeChecker  /path/to/lua/script.lua hook_function_name</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
    <usage><p>...</p></usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookAuthChecker</name>
<description>Provide a hook for the auth_checker phase of request processing</description>
<syntax>LuaHookAuthChecker  /path/to/lua/script.lua hook_function_name [early|late]</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
<compatibility>The optional third argument is supported in 2.3.15 and later</compatibility>
<usage>
<p>Invoke a lua function in the auth_checker phase of processing
a request.  This can be used to implement arbitrary authentication
and authorization checking.  A very simple example:
</p>
<example><pre>
require 'apache2'

-- fake authcheck hook
-- If request has no auth info, set the response header and
-- return a 401 to ask the browser for basic auth info.
-- If request has auth info, don't actually look at it, just
-- pretend we got userid 'foo' and validated it.
-- Then check if the userid is 'foo' and accept the request.
function authcheck_hook(r)

   -- look for auth info
   auth = r.headers_in['Authorization']
   if auth ~= nil then
     -- fake the user
     r.user = 'foo'
   end

   if r.user == nil then
      r:debug("authcheck: user is nil, returning 401")
      r.err_headers_out['WWW-Authenticate'] = 'Basic realm="WallyWorld"'
      return 401
   elseif r.user == "foo" then
      r:debug('user foo: OK')
   else
      r:debug("authcheck: user='" .. r.user .. "'")
      r.err_headers_out['WWW-Authenticate'] = 'Basic realm="WallyWorld"'
      return 401
   end
   return apache2.OK
end
</pre></example>
   <note><title>Ordering</title><p>The optional arguments "early" or "late" 
   control when this script runs relative to other modules.</p></note>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookAccessChecker</name>
<description>Provide a hook for the access_checker phase of request processing</description>
<syntax>LuaHookAccessChecker  /path/to/lua/script.lua  hook_function_name [early|late]</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
<compatibility>The optional third argument is supported in 2.3.15 and later</compatibility>
<usage>
<p>Add your hook to the access_checker phase.  An access checker
hook function usually returns OK, DECLINED, or HTTP_FORBIDDEN.</p>
   <note><title>Ordering</title><p>The optional arguments "early" or "late" 
   control when this script runs relative to other modules.</p></note>
</usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaHookInsertFilter</name>
<description>Provide a hook for the insert_filter phase of request processing</description>
<syntax>LuaHookInsertFilter  /path/to/lua/script.lua hook_function_name</syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
    <usage><p>Not Yet Implemented</p></usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaInherit</name>
<description>Controls how parent configuration sections are merged into children</description>
<syntax>LuaInherit none|parent-first|parent-last</syntax>
<default>LuaInherit parent-first</default>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context><context>.htaccess</context>
</contextlist>
<override>All</override>
<compatibility>2.5.0 and later</compatibility>
    <usage><p>By default, if LuaHook* directives are used in overlapping
    Directory or Location configuration sections, the scripts defined in the
    more specific section are run <em>after</em> those defined in the more
    generic section (LuaInherit parent-first).  You can reverse this order, or
    make the parent context not apply at all.</p>
    
    <p> In previous 2.3.x releases, the default was effectively to ignore LuaHook*
    directives from parent configuration sections.</p></usage>
</directivesynopsis>

<directivesynopsis>
<name>LuaQuickHandler</name>
<description>Provide a hook for the quick handler of request processing</description>
<syntax></syntax>
<contextlist><context>server config</context><context>virtual host</context>
<context>directory</context>
</contextlist>
<override>All</override>
<usage><p>...</p>
   <note><title>Context</title><p>This directive is not valid in <directive
   type="section" module="core">Directory</directive>, <directive
   type="section" module="core">Files</directive>, or htaccess
   context.</p></note>
</usage>
</directivesynopsis>

</modulesynopsis>
